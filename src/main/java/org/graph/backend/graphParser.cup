// Header java code
package org.graph.backend;

import java.awt.Color;
import java_cup.runtime.*;

import org.graph.backend.tree.Node;
import org.graph.frontend.canvas.*;

// Class name
parser code {:

    private GraphCanvas canvas;

    public GraphParser(GraphLexer lex, GraphCanvas canvas) {
        super(lex);
        this.canvas = canvas;
    }

    public void syntax_error(Symbol s) {
        System.out.println("Syntax error in line: " + (s.left) +
        " column: "+s.right+ ". didn't expect component: " +s.value+".");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Sintax error unrecovered in line: " +
        (s.left)+ " column: "+s.right+". Component: " + s.value + " not recognized.");
    }

:}

// Terminals
terminal String NUMBER, NAME, ADDITION, SUBSTRACTION, MULTIPLICATION, DIVISION, PARENTHESES_START, PARENTHESES_END, COMMA, GRAFICAR, ANIMAR, CIRCULO, CUADRADO, RECTANGULO, LINEA, POLIGONO, AZUL, ROJO, AMARILLO, VERDE, CELESTE, NEGRO, ROSADO, CAFE, NARANJA, CURVA, OBJETO, ANTERIOR;

// Non-terminals
non terminal s, s1, s2, s3, s4, s5, s6, s7, s8, anmt, color;
non terminal Node expr, term, factor;

// Initial state
start with s;

// Productions
s ::=
    s s1
    |
    s1
    ;

s1 ::=
    GRAFICAR s2
    |
    ANIMAR s3
    |
    error s1
    ;

s2 ::=
    CIRCULO s4
    |
    CUADRADO s7
    |
    RECTANGULO s8
    |
    LINEA s5
    |
    POLIGONO s6
    ;

s3 ::=
    OBJETO ANTERIOR PARENTHESES_START anmt COMMA expr COMMA expr COMMA expr PARENTHESES_END
    ;

anmt ::=
    LINEA
    |
    CURVA
    ;

s4 ::=
    PARENTHESES_START NAME:n COMMA expr:x COMMA expr:y COMMA expr:r COMMA color:c PARENTHESES_END
    {:
        String name = n;
        double xValue = x.getValue();
        double yValue = y.getValue();
        double rValue = r.getValue();
        Color colorValue = (Color) c;

        canvas.addCircle(name, xValue, yValue, rValue, colorValue);
    :}
    ;

s5 ::=
    PARENTHESES_START NAME:n COMMA expr:x1 COMMA expr:y1 COMMA expr:x2 COMMA expr:y2 COMMA color:c PARENTHESES_END
    {:
        String name = n;
        double x1Value = x1.getValue();
        double y1Value = y1.getValue();
        double x2Value = x2.getValue();
        double y2Value = y2.getValue();
        Color colorValue = (Color) c;

        canvas.addLine(name, x1Value, y1Value, x2Value, y2Value, colorValue);
    :}
    ;

s6 ::=
    PARENTHESES_START NAME:n COMMA expr:x COMMA expr:y COMMA expr:cl COMMA expr:w COMMA expr:h COMMA color:c PARENTHESES_END
    {:
        String name = n;
        double xValue = x.getValue();
        double yValue = y.getValue();
        int clValue = (int) cl.getValue();
        double wValue = w.getValue();
        double hValue = h.getValue();
        Color colorValue = (Color) c;

        canvas.addPol(name, xValue, yValue, clValue, wValue, hValue, colorValue);

    :}
    ;

s7 ::=
    PARENTHESES_START NAME:n COMMA expr:x COMMA expr:y COMMA expr:l COMMA color:c PARENTHESES_END
    {:
        String name = n;
        double xValue = x.getValue();
        double yValue = y.getValue();
        double lValue = l.getValue();
        Color colorValue = (Color) c;

        canvas.addSqr(name, xValue, yValue, lValue, colorValue);
    :}
    ;

s8 ::=
    PARENTHESES_START NAME:n COMMA expr:x COMMA expr:y COMMA expr:l1 COMMA expr:l2 COMMA color:c PARENTHESES_END
    {:
        String name = n;
        double xValue = x.getValue();
        double yValue = y.getValue();
        double l1Value = l1.getValue();
        double l2Value = l2.getValue();
        Color colorValue = (Color) c;

        canvas.addRec(name, xValue, yValue, l1Value, l2Value, colorValue);
    :}
    ;

expr ::=
    expr:e ADDITION term:t {: RESULT = new Node(e, t, Node.Type.ADDITION);:}
    |
    expr:e SUBSTRACTION term:t {: RESULT = new Node(e, t, Node.Type.SUBSTRACTION); :}
    |
    term:t {: RESULT = t; :}
    ;

term ::=
    term:t MULTIPLICATION factor:f {: RESULT = new Node(t, f, Node.Type.MULTIPLICATION);:}
    |
    term:t DIVISION factor:f {: RESULT = new Node(t, f, Node.Type.DIVISION);:}
    |
    factor:f {: RESULT = f; :}
    |
    factor:f1 factor:f2 {: RESULT = new Node(f1, f2, Node.Type.MULTIPLICATION); :}
    ;

factor ::=
    NUMBER:n {: RESULT = new Node(Double.parseDouble(n)); :}
    |
    PARENTHESES_START expr:e PARENTHESES_END {: RESULT = e; :}
    ;

color ::=
    AZUL {: RESULT = Color.BLUE; :}
    |
    ROJO {: RESULT = Color.RED; :}
    |
    AMARILLO {: RESULT = Color.YELLOW; :}
    |
    VERDE {: RESULT = Color.GREEN; :}
    |
    CELESTE {: RESULT = Color.CYAN; :}
    |
    NEGRO {: RESULT = Color.BLACK; :}
    |
    ROSADO {: RESULT = Color.PINK; :}
    |
    CAFE {: RESULT = new Color(139, 69, 19); :}
    |
    NARANJA {: RESULT = Color.ORANGE; :}
    ;
