
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.graph.backend;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class GraphParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public GraphParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public GraphParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public GraphParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\005\015\000\002" +
    "\011\003\000\002\011\003\000\002\006\015\000\002\007" +
    "\017\000\002\010\021\000\002\012\005\000\002\012\005" +
    "\000\002\012\003\000\002\013\005\000\002\013\005\000" +
    "\002\013\003\000\002\013\004\000\002\014\003\000\002" +
    "\014\005\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\010\003\006\015\004\016\005\001\002\000" +
    "\014\017\054\020\056\021\051\022\055\023\053\001\002" +
    "\000\004\036\015\001\002\000\010\003\006\015\004\016" +
    "\005\001\002\000\012\002\uffff\003\uffff\015\uffff\016\uffff" +
    "\001\002\000\012\002\012\003\006\015\004\016\005\001" +
    "\002\000\012\002\000\003\000\015\000\016\000\001\002" +
    "\000\004\002\001\001\002\000\012\002\ufffc\003\ufffc\015" +
    "\ufffc\016\ufffc\001\002\000\012\002\ufffd\003\ufffd\015\ufffd" +
    "\016\ufffd\001\002\000\004\037\016\001\002\000\004\012" +
    "\017\001\002\000\006\022\022\035\020\001\002\000\004" +
    "\014\ufff4\001\002\000\004\014\023\001\002\000\004\014" +
    "\ufff5\001\002\000\006\004\027\012\024\001\002\000\006" +
    "\004\027\012\024\001\002\000\022\004\027\006\uffeb\007" +
    "\uffeb\010\uffeb\011\uffeb\012\024\013\uffeb\014\uffeb\001\002" +
    "\000\016\006\uffee\007\uffee\010\035\011\036\013\uffee\014" +
    "\uffee\001\002\000\022\004\uffe9\006\uffe9\007\uffe9\010\uffe9" +
    "\011\uffe9\012\uffe9\013\uffe9\014\uffe9\001\002\000\010\006" +
    "\033\007\032\014\031\001\002\000\006\004\027\012\024" +
    "\001\002\000\006\004\027\012\024\001\002\000\006\004" +
    "\027\012\024\001\002\000\016\006\ufff0\007\ufff0\010\035" +
    "\011\036\013\ufff0\014\ufff0\001\002\000\006\004\027\012" +
    "\024\001\002\000\006\004\027\012\024\001\002\000\016" +
    "\006\uffec\007\uffec\010\uffec\011\uffec\013\uffec\014\uffec\001" +
    "\002\000\016\006\uffed\007\uffed\010\uffed\011\uffed\013\uffed" +
    "\014\uffed\001\002\000\016\006\uffef\007\uffef\010\035\011" +
    "\036\013\uffef\014\uffef\001\002\000\010\006\033\007\032" +
    "\014\043\001\002\000\006\004\027\012\024\001\002\000" +
    "\010\006\033\007\032\013\045\001\002\000\012\002\ufff6" +
    "\003\ufff6\015\ufff6\016\ufff6\001\002\000\016\006\uffea\007" +
    "\uffea\010\uffea\011\uffea\013\uffea\014\uffea\001\002\000\010" +
    "\006\033\007\032\013\050\001\002\000\022\004\uffe8\006" +
    "\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\001\002\000\004\012\105\001\002\000\012\002\ufffe\003" +
    "\ufffe\015\ufffe\016\ufffe\001\002\000\004\012\123\001\002" +
    "\000\004\012\057\001\002\000\004\012\105\001\002\000" +
    "\004\012\057\001\002\000\004\005\061\001\002\000\012" +
    "\002\ufffa\003\ufffa\015\ufffa\016\ufffa\001\002\000\004\014" +
    "\062\001\002\000\006\004\027\012\024\001\002\000\010" +
    "\006\033\007\032\014\064\001\002\000\006\004\027\012" +
    "\024\001\002\000\010\006\033\007\032\014\066\001\002" +
    "\000\006\004\027\012\024\001\002\000\010\006\033\007" +
    "\032\014\070\001\002\000\024\024\101\025\075\026\073" +
    "\027\077\030\076\031\100\032\102\033\071\034\074\001" +
    "\002\000\004\013\uffe0\001\002\000\004\013\103\001\002" +
    "\000\004\013\uffe5\001\002\000\004\013\uffdf\001\002\000" +
    "\004\013\uffe6\001\002\000\004\013\uffe3\001\002\000\004" +
    "\013\uffe4\001\002\000\004\013\uffe2\001\002\000\004\013" +
    "\uffe7\001\002\000\004\013\uffe1\001\002\000\012\002\ufff3" +
    "\003\ufff3\015\ufff3\016\ufff3\001\002\000\012\002\ufff8\003" +
    "\ufff8\015\ufff8\016\ufff8\001\002\000\004\005\106\001\002" +
    "\000\004\014\107\001\002\000\006\004\027\012\024\001" +
    "\002\000\010\006\033\007\032\014\111\001\002\000\006" +
    "\004\027\012\024\001\002\000\010\006\033\007\032\014" +
    "\113\001\002\000\006\004\027\012\024\001\002\000\010" +
    "\006\033\007\032\014\115\001\002\000\006\004\027\012" +
    "\024\001\002\000\010\006\033\007\032\014\117\001\002" +
    "\000\024\024\101\025\075\026\073\027\077\030\076\031" +
    "\100\032\102\033\071\034\074\001\002\000\004\013\121" +
    "\001\002\000\012\002\ufff2\003\ufff2\015\ufff2\016\ufff2\001" +
    "\002\000\012\002\ufffb\003\ufffb\015\ufffb\016\ufffb\001\002" +
    "\000\004\005\125\001\002\000\012\002\ufff7\003\ufff7\015" +
    "\ufff7\016\ufff7\001\002\000\004\014\126\001\002\000\006" +
    "\004\027\012\024\001\002\000\010\006\033\007\032\014" +
    "\130\001\002\000\006\004\027\012\024\001\002\000\010" +
    "\006\033\007\032\014\132\001\002\000\006\004\027\012" +
    "\024\001\002\000\010\006\033\007\032\014\134\001\002" +
    "\000\006\004\027\012\024\001\002\000\010\006\033\007" +
    "\032\014\136\001\002\000\006\004\027\012\024\001\002" +
    "\000\010\006\033\007\032\014\140\001\002\000\024\024" +
    "\101\025\075\026\073\027\077\030\076\031\100\032\102" +
    "\033\071\034\074\001\002\000\004\013\142\001\002\000" +
    "\012\002\ufff1\003\ufff1\015\ufff1\016\ufff1\001\002\000\012" +
    "\002\ufff9\003\ufff9\015\ufff9\016\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\006\002\007\003\006\001\001\000\004\004" +
    "\051\001\001\000\004\005\013\001\001\000\004\003\012" +
    "\001\001\000\002\001\001\000\004\003\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\027\013\025\014\024\001\001\000" +
    "\010\012\046\013\025\014\024\001\001\000\004\014\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\041\013\025\014\024\001\001\000\006" +
    "\013\040\014\024\001\001\000\006\013\033\014\024\001" +
    "\001\000\002\001\001\000\004\014\037\001\001\000\004" +
    "\014\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\043\013\025" +
    "\014\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\142\001\001\000\002\001\001\000\004\010\123\001" +
    "\001\000\004\006\121\001\001\000\004\007\103\001\001" +
    "\000\004\006\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\062\013\025\014\024" +
    "\001\001\000\002\001\001\000\010\012\064\013\025\014" +
    "\024\001\001\000\002\001\001\000\010\012\066\013\025" +
    "\014\024\001\001\000\002\001\001\000\004\015\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\107\013\025\014\024" +
    "\001\001\000\002\001\001\000\010\012\111\013\025\014" +
    "\024\001\001\000\002\001\001\000\010\012\113\013\025" +
    "\014\024\001\001\000\002\001\001\000\010\012\115\013" +
    "\025\014\024\001\001\000\002\001\001\000\004\015\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\126\013\025\014\024\001\001\000\002\001" +
    "\001\000\010\012\130\013\025\014\024\001\001\000\002" +
    "\001\001\000\010\012\132\013\025\014\024\001\001\000" +
    "\002\001\001\000\010\012\134\013\025\014\024\001\001" +
    "\000\002\001\001\000\010\012\136\013\025\014\024\001" +
    "\001\000\002\001\001\000\004\015\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$GraphParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$GraphParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$GraphParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public GraphParser (GraphLexer lex) {
        super(lex);
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println("syntaxerr: " + symbl_name_from_id(cur_token.sym));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$GraphParser$actions {
  private final GraphParser parser;

  /** Constructor */
  CUP$GraphParser$actions(GraphParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$GraphParser$do_action_part00000000(
    int                        CUP$GraphParser$act_num,
    java_cup.runtime.lr_parser CUP$GraphParser$parser,
    java.util.Stack            CUP$GraphParser$stack,
    int                        CUP$GraphParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$GraphParser$result;

      /* select the action based on the action number */
      switch (CUP$GraphParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-1)).value;
		RESULT = start_val;
              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-1)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$GraphParser$parser.done_parsing();
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= s s1 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-1)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= s1 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // s1 ::= GRAFICAR s2 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-1)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s1 ::= ANIMAR s3 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-1)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // s1 ::= error s1 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-1)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // s2 ::= CIRCULO s4 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("s2",2, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-1)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // s2 ::= CUADRADO s4 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("s2",2, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-1)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // s2 ::= RECTANGULO s5 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("s2",2, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-1)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // s2 ::= LINEA s5 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("s2",2, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-1)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // s2 ::= POLIGONO s6 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("s2",2, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-1)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // s3 ::= OBJETO ANTERIOR PARENTHESES_START anmt COMMA expr COMMA expr COMMA expr PARENTHESES_END 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("s3",3, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-10)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // anmt ::= LINEA 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("anmt",7, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // anmt ::= CURVA 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("anmt",7, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // s4 ::= PARENTHESES_START NAME COMMA expr COMMA expr COMMA expr COMMA color PARENTHESES_END 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("s4",4, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-10)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // s5 ::= PARENTHESES_START NAME COMMA expr COMMA expr COMMA expr COMMA expr COMMA color PARENTHESES_END 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("s5",5, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-12)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // s6 ::= PARENTHESES_START NAME COMMA expr COMMA expr COMMA expr COMMA expr COMMA expr COMMA color PARENTHESES_END 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("s6",6, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-14)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr ADDITION term 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-2)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr SUBSTRACTION term 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$GraphParser$stack.peek()).value;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-2)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= term 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // term ::= term MULTIPLICATION factor 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("term",9, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-2)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // term ::= term DIVISION factor 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("term",9, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-2)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // term ::= factor 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("term",9, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // term ::= factor factor 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("term",9, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-1)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // factor ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$GraphParser$stack.peek()).value;
		 System.out.println("Number: " + n); 
              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // factor ::= PARENTHESES_START expr PARENTHESES_END 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-2)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // color ::= AZUL 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("color",11, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // color ::= ROJO 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("color",11, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // color ::= AMARILLO 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("color",11, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // color ::= VERDE 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("color",11, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // color ::= CELESTE 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("color",11, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // color ::= NEGRO 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("color",11, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // color ::= ROSADO 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("color",11, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // color ::= CAFE 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("color",11, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // color ::= NARANJA 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("color",11, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$GraphParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$GraphParser$do_action(
    int                        CUP$GraphParser$act_num,
    java_cup.runtime.lr_parser CUP$GraphParser$parser,
    java.util.Stack            CUP$GraphParser$stack,
    int                        CUP$GraphParser$top)
    throws java.lang.Exception
    {
              return CUP$GraphParser$do_action_part00000000(
                               CUP$GraphParser$act_num,
                               CUP$GraphParser$parser,
                               CUP$GraphParser$stack,
                               CUP$GraphParser$top);
    }
}

}
