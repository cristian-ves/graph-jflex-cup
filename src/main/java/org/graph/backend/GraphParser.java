
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.graph.backend;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class GraphParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public GraphParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public GraphParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public GraphParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\004\015\000" +
    "\002\010\003\000\002\010\003\000\002\005\015\000\002" +
    "\006\017\000\002\007\021\000\002\011\005\000\002\011" +
    "\005\000\002\011\003\000\002\012\005\000\002\012\005" +
    "\000\002\012\003\000\002\013\003\000\002\013\005\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\134\000\006\015\004\016\005\001\002\000\014\017" +
    "\047\020\051\021\044\022\050\023\046\001\002\000\004" +
    "\037\011\001\002\000\004\002\007\001\002\000\004\002" +
    "\001\001\002\000\004\002\uffff\001\002\000\004\040\012" +
    "\001\002\000\004\012\013\001\002\000\006\035\015\036" +
    "\014\001\002\000\004\014\ufff7\001\002\000\004\014\ufff8" +
    "\001\002\000\004\014\017\001\002\000\006\004\023\012" +
    "\020\001\002\000\006\004\023\012\020\001\002\000\016" +
    "\006\uffee\007\uffee\010\uffee\011\uffee\013\uffee\014\uffee\001" +
    "\002\000\016\006\ufff1\007\ufff1\010\031\011\032\013\ufff1" +
    "\014\ufff1\001\002\000\016\006\uffed\007\uffed\010\uffed\011" +
    "\uffed\013\uffed\014\uffed\001\002\000\010\006\027\007\026" +
    "\014\025\001\002\000\006\004\023\012\020\001\002\000" +
    "\006\004\023\012\020\001\002\000\006\004\023\012\020" +
    "\001\002\000\016\006\ufff3\007\ufff3\010\031\011\032\013" +
    "\ufff3\014\ufff3\001\002\000\006\004\023\012\020\001\002" +
    "\000\006\004\023\012\020\001\002\000\016\006\uffef\007" +
    "\uffef\010\uffef\011\uffef\013\uffef\014\uffef\001\002\000\016" +
    "\006\ufff0\007\ufff0\010\ufff0\011\ufff0\013\ufff0\014\ufff0\001" +
    "\002\000\016\006\ufff2\007\ufff2\010\031\011\032\013\ufff2" +
    "\014\ufff2\001\002\000\010\006\027\007\026\014\037\001" +
    "\002\000\006\004\023\012\020\001\002\000\010\006\027" +
    "\007\026\013\041\001\002\000\004\002\ufff9\001\002\000" +
    "\010\006\027\007\026\013\043\001\002\000\016\006\uffec" +
    "\007\uffec\010\uffec\011\uffec\013\uffec\014\uffec\001\002\000" +
    "\004\012\100\001\002\000\004\002\000\001\002\000\004" +
    "\012\116\001\002\000\004\012\052\001\002\000\004\012" +
    "\100\001\002\000\004\012\052\001\002\000\004\005\054" +
    "\001\002\000\004\002\ufffd\001\002\000\004\014\055\001" +
    "\002\000\006\004\023\012\020\001\002\000\010\006\027" +
    "\007\026\014\057\001\002\000\006\004\023\012\020\001" +
    "\002\000\010\006\027\007\026\014\061\001\002\000\006" +
    "\004\023\012\020\001\002\000\010\006\027\007\026\014" +
    "\063\001\002\000\024\024\075\025\067\026\066\027\073" +
    "\030\071\031\072\032\074\033\064\034\070\001\002\000" +
    "\004\013\uffe4\001\002\000\004\013\076\001\002\000\004" +
    "\013\uffe9\001\002\000\004\013\uffea\001\002\000\004\013" +
    "\uffe3\001\002\000\004\013\uffe7\001\002\000\004\013\uffe6" +
    "\001\002\000\004\013\uffe8\001\002\000\004\013\uffe5\001" +
    "\002\000\004\013\uffeb\001\002\000\004\002\ufff6\001\002" +
    "\000\004\002\ufffb\001\002\000\004\005\101\001\002\000" +
    "\004\014\102\001\002\000\006\004\023\012\020\001\002" +
    "\000\010\006\027\007\026\014\104\001\002\000\006\004" +
    "\023\012\020\001\002\000\010\006\027\007\026\014\106" +
    "\001\002\000\006\004\023\012\020\001\002\000\010\006" +
    "\027\007\026\014\110\001\002\000\006\004\023\012\020" +
    "\001\002\000\010\006\027\007\026\014\112\001\002\000" +
    "\024\024\075\025\067\026\066\027\073\030\071\031\072" +
    "\032\074\033\064\034\070\001\002\000\004\013\114\001" +
    "\002\000\004\002\ufff5\001\002\000\004\002\ufffe\001\002" +
    "\000\004\005\120\001\002\000\004\002\ufffa\001\002\000" +
    "\004\014\121\001\002\000\006\004\023\012\020\001\002" +
    "\000\010\006\027\007\026\014\123\001\002\000\006\004" +
    "\023\012\020\001\002\000\010\006\027\007\026\014\125" +
    "\001\002\000\006\004\023\012\020\001\002\000\010\006" +
    "\027\007\026\014\127\001\002\000\006\004\023\012\020" +
    "\001\002\000\010\006\027\007\026\014\131\001\002\000" +
    "\006\004\023\012\020\001\002\000\010\006\027\007\026" +
    "\014\133\001\002\000\024\024\075\025\067\026\066\027" +
    "\073\030\071\031\072\032\074\033\064\034\070\001\002" +
    "\000\004\013\135\001\002\000\004\002\ufff4\001\002\000" +
    "\004\002\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\134\000\004\002\005\001\001\000\004\003\044\001" +
    "\001\000\004\004\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\023\012\021\013" +
    "\020\001\001\000\010\011\041\012\021\013\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\035\012\021\013\020\001\001" +
    "\000\006\012\034\013\020\001\001\000\006\012\027\013" +
    "\020\001\001\000\002\001\001\000\004\013\033\001\001" +
    "\000\004\013\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\037" +
    "\012\021\013\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\135" +
    "\001\001\000\002\001\001\000\004\007\116\001\001\000" +
    "\004\005\114\001\001\000\004\006\076\001\001\000\004" +
    "\005\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\055\012\021\013\020\001\001" +
    "\000\002\001\001\000\010\011\057\012\021\013\020\001" +
    "\001\000\002\001\001\000\010\011\061\012\021\013\020" +
    "\001\001\000\002\001\001\000\004\014\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\102\012\021\013\020\001\001" +
    "\000\002\001\001\000\010\011\104\012\021\013\020\001" +
    "\001\000\002\001\001\000\010\011\106\012\021\013\020" +
    "\001\001\000\002\001\001\000\010\011\110\012\021\013" +
    "\020\001\001\000\002\001\001\000\004\014\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\121\012\021\013\020\001\001\000\002\001\001\000" +
    "\010\011\123\012\021\013\020\001\001\000\002\001\001" +
    "\000\010\011\125\012\021\013\020\001\001\000\002\001" +
    "\001\000\010\011\127\012\021\013\020\001\001\000\002" +
    "\001\001\000\010\011\131\012\021\013\020\001\001\000" +
    "\002\001\001\000\004\014\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$GraphParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$GraphParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$GraphParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public GraphParser (GraphLexer lex) {
        super(lex);
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println("syntaxerr: " + symbl_name_from_id(cur_token.sym));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$GraphParser$actions {
  private final GraphParser parser;

  /** Constructor */
  CUP$GraphParser$actions(GraphParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$GraphParser$do_action_part00000000(
    int                        CUP$GraphParser$act_num,
    java_cup.runtime.lr_parser CUP$GraphParser$parser,
    java.util.Stack            CUP$GraphParser$stack,
    int                        CUP$GraphParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$GraphParser$result;

      /* select the action based on the action number */
      switch (CUP$GraphParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s1 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-1)).value;
		RESULT = start_val;
              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-1)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$GraphParser$parser.done_parsing();
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s1 ::= GRAFICAR s2 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("s1",0, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-1)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s1 ::= ANIMAR s3 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("s1",0, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-1)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // s2 ::= CIRCULO s4 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("s2",1, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-1)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s2 ::= CUADRADO s4 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("s2",1, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-1)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // s2 ::= RECTANGULO s5 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("s2",1, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-1)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // s2 ::= LINEA s5 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("s2",1, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-1)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // s2 ::= POLIGONO s6 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("s2",1, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-1)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // s3 ::= OBJETO ANTERIOR PARENTHESES_START anmt COMMA expr COMMA expr COMMA expr PARENTHESES_END 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("s3",2, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-10)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // anmt ::= LINEA_A 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("anmt",6, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // anmt ::= CURVA 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("anmt",6, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // s4 ::= PARENTHESES_START NAME COMMA expr COMMA expr COMMA expr COMMA color PARENTHESES_END 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("s4",3, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-10)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // s5 ::= PARENTHESES_START NAME COMMA expr COMMA expr COMMA expr COMMA expr COMMA color PARENTHESES_END 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("s5",4, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-12)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // s6 ::= PARENTHESES_START NAME COMMA expr COMMA expr COMMA expr COMMA expr COMMA expr COMMA color PARENTHESES_END 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("s6",5, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-14)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr ADDITION term 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$GraphParser$stack.peek()).value;
		 System.out.println("addition of " + " expr " + e + " & term " + t + " = " );
              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-2)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr SUBSTRACTION term 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$GraphParser$stack.peek()).value;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-2)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= term 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // term ::= term MULTIPLICATION factor 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-2)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // term ::= term DIVISION factor 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-2)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // term ::= factor 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // factor ::= NUMBER 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // factor ::= PARENTHESES_START expr PARENTHESES_END 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.elementAt(CUP$GraphParser$top-2)), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // color ::= AZUL 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("color",10, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // color ::= ROJO 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("color",10, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // color ::= AMARILLO 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("color",10, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // color ::= VERDE 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("color",10, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // color ::= CELESTE 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("color",10, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // color ::= NEGRO 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("color",10, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // color ::= ROSADO 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("color",10, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // color ::= CAFE 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("color",10, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // color ::= NARANJA 
            {
              Object RESULT =null;

              CUP$GraphParser$result = parser.getSymbolFactory().newSymbol("color",10, ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphParser$stack.peek()), RESULT);
            }
          return CUP$GraphParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$GraphParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$GraphParser$do_action(
    int                        CUP$GraphParser$act_num,
    java_cup.runtime.lr_parser CUP$GraphParser$parser,
    java.util.Stack            CUP$GraphParser$stack,
    int                        CUP$GraphParser$top)
    throws java.lang.Exception
    {
              return CUP$GraphParser$do_action_part00000000(
                               CUP$GraphParser$act_num,
                               CUP$GraphParser$parser,
                               CUP$GraphParser$stack,
                               CUP$GraphParser$top);
    }
}

}
